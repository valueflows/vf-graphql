##
#
# Scenario module
#
# Facilitates grouping of processes together into logical collections of higher level processes.
#
# @depends  measurement.gql
# @package  vf-graphql
# @since    2019-02-11
#
##

"""
An estimated or analytical logical collection of higher level processes used for budgeting, analysis, plan refinement, etc.
"""
type Scenario {
  id: ID!

  "An informal or formal textual identifier for a scenario. Does not imply uniqueness."
  name: String!

  "The beginning date/time of the scenario, often the beginning of an accounting period."
  hasBeginning: DateTime

  "The ending date/time of the scenario, often the end of an accounting period."
  hasEnd: DateTime

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [AccountingScope!]

  "The scenario definition for this scenario, for example yearly budget."
  definedAs: ScenarioDefinition

  "This scenario refines another scenario, often as time moves closer or for more detail."
  refinementOf: Scenario

  "A textual description or comment."
  note: String
}

"""
The type definition of one or more scenarios, such as Yearly Budget.
"""
type ScenarioDefinition {
  id: ID!

  "An informal or formal textual identifier for a scenario definition. Does not imply uniqueness."
  name: String!

  "The duration of the scenario, often an accounting period."
  hasDuration: Duration

  "A textual description or comment."
  note: String
}



input ScenarioCreateParams {
  "An informal or formal textual identifier for a scenario. Does not imply uniqueness."
  name: String!

  "(`ScenarioDefinition`) The scenario definition for this scenario, for example yearly budget."
  definedAs: ID!

  "The beginning date/time of the scenario, often the beginning of an accounting period."
  hasBeginning: DateTime

  "The ending date/time of the scenario, often the end of an accounting period."
  hasEnd: DateTime

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [ID!]

  "(`Scenario`) This scenario refines another scenario, often as time moves closer or for more detail."
  refinementOf: ID

  "A textual description or comment."
  note: String
}

input ScenarioUpdateParams {
  id: ID!

  "An informal or formal textual identifier for a scenario. Does not imply uniqueness."
  name: String

  "(`ScenarioDefinition`) The scenario definition for this scenario, for example yearly budget."
  definedAs: ID!

  "The beginning date/time of the scenario, often the beginning of an accounting period."
  hasBeginning: DateTime

  "The ending date/time of the scenario, often the end of an accounting period."
  hasEnd: DateTime

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [ID!]

  "(`Scenario`) This scenario refines another scenario, often as time moves closer or for more detail."
  refinementOf: ID

  "A textual description or comment."
  note: String
}

type ScenarioResponse {
  scenario: Scenario
}



input ScenarioDefinitionCreateParams {
  "An informal or formal textual identifier for a scenario definition. Does not imply uniqueness."
  name: String

  "The duration of the scenario, often an accounting period."
  hasDuration: IDuration

  "A textual description or comment."
  note: String
}

input ScenarioDefinitionUpdateParams {
  id: ID!

  "An informal or formal textual identifier for a scenario definition. Does not imply uniqueness."
  name: String!

  "The duration of the scenario, often an accounting period."
  hasDuration: IDuration

  "A textual description or comment."
  note: String
}

type ScenarioDefinitionResponse {
  scenarioDefinition: ScenarioDefinition
}



type Query {
  scenario(id: ID): Scenario
  scenarios(start: ID, limit: Int): [Scenario!]

  scenarioDefinition(id: ID): ScenarioDefinition
  scenarioDefinitions(start: ID, limit: Int): [ScenarioDefinition!]
}

type Mutation {
  createScenario(plan: ScenarioCreateParams!): ScenarioResponse
  updateScenario(plan: ScenarioUpdateParams!): ScenarioResponse
  deleteScenario(id: ID!): Boolean

  createScenarioDefinition(plan: ScenarioDefinitionCreateParams!): ScenarioDefinitionResponse
  updateScenarioDefinition(plan: ScenarioDefinitionUpdateParams!): ScenarioDefinitionResponse
  deleteScenarioDefinition(id: ID!): Boolean
}
