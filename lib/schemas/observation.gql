##
#
# Observation module
#
# Record of what actually happened affecting the economic ecosystem.
#
# @depends  measurement.gql
# @depends  knowledge.gql
# @depends  agent.gql
# @package  vf-graphql
# @since    2019-02-11
#
##

union ProductionFlowItem = Process | EconomicResource

"""
An observed economic flow, as opposed to a flow planned to happen in the future. This could reflect a change in the quantity of an economic resource. It is also defined by its behavior in relation to the economic resource (see `Action`)
"""
type EconomicEvent {
  id: ID!

  "Relates an economic event to a verb, such as consume, produce, work, improve, etc."
  action: Action!

  "Defines the process to which this event is an input."
  inputOf: Process

  "Defines the process for which this event is an output."
  outputOf: Process

  "The economic agent from whom the actual economic event is initiated."
  provider: Agent!

  "The economic agent whom the actual economic event is for."
  receiver: Agent!

  "Economic resource involved in the economic event."
  resourceInventoriedAs: EconomicResource

  "Additional economic resource on the economic event when needed by the receiver. Used when a transfer or move, or sometimes other actions, requires explicitly identifying an economic resource on the receiving side."
  toResourceInventoriedAs: EconomicResource

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  resourceConformsTo: ResourceSpecificationRef

  "The amount and unit of the economic resource counted or inventoried. This is the quantity that could be used to increment or decrement a resource, depending on the type of resource and resource effect of action."
  resourceQuantity: Measure

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: Measure

  "The beginning of the economic event."
  hasBeginning: DateTime

  "The end of the economic event."
  hasEnd: DateTime

  "The date/time at which the economic event occurred. Can be used instead of beginning and end."
  hasPointInTime: DateTime

  "A textual description or comment."
  note: String

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [AccountingScope!]

  "Reference to an agreement between agents which specifies the rules or policies or calculations which govern this economic event."
  agreedIn: URI

  "References another economic event that implied this economic event, often based on a prior agreement."
  triggeredBy: EconomicEvent

  ##############################################################################
  # inverse relationships and queries

  track: [ProductionFlowItem!]
  trace: [ProductionFlowItem!]

  "The economic event can be safely deleted, has no dependent information."
  deletable: Boolean
}

"""
A resource which is useful to people or the ecosystem.
"""
type EconomicResource {
  id: ID!

  "An informal or formal textual identifier for an item. Does not imply uniqueness."
  name: String

  "References one or more concepts in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  classifiedAs: [URI!]

  "The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  conformsTo: ResourceSpecificationRef!

  "Sometimes called serial number, used when each item must have a traceable identifier (like a computer). Could also be used for other unique tracking identifiers needed for resources."
  trackingIdentifier: String

  "Lot or batch of an economic resource, used to track forward or backwards to all occurrences of resources of that lot. Note more than one resource can be of the same lot."
  lot: ProductBatch

  "The uri to an image relevant to the resource, such as a photo, diagram, etc."
  image: URI

  "The current amount and unit of the economic resource for which the agent has primary rights and responsibilities, sometimes thought of as ownership. This can be either stored or derived from economic events affecting the resource."
  accountingQuantity: Measure

  "The current amount and unit of the economic resource which is under direct control of the agent.  It may be more or less than the accounting quantity. This can be either stored or derived from economic events affecting the resource."
  onhandQuantity: Measure

  "A textual description or comment."
  note: String

  "The unit used for use or work or cite actions for this resource."
  unitOfEffort: Unit

  "References the ProcessSpecification of the last process the desired economic resource went through. Stage is used when the last process is important for finding proper resources, such as where the publishing process wants only documents that have gone through the editing process."
  stage: ProcessSpecificationRef

  "The state of the desired economic resource (pass or fail), after coming out of a test or review process. Can be derived from the last event if a pass or fail event."
  state: Action

  "Used when a stock economic resource contains items also defined as economic resources."
  containedIn: EconomicResource

  "The agent currently with primary rights and responsibilites for the economic resource. It is the agent that is associated with the accountingQuantity of the economic resource."
  primaryAccountable: Agent

  ##############################################################################
  # inverse relationships and queries

  "Used when a stock economic resource contains units also defined as economic resources."
  contains: [EconomicResource!]

  trace: [EconomicEvent!]
  track: [EconomicEvent!]
}

"""
A lot or batch, defining a resource produced at the same time in the same way.
From DataFoodConsortium vocabulary https://datafoodconsortium.gitbook.io/dfc-standard-documentation/.
"""
type ProductBatch {
  id: ID!

  "The standard unique identifier of the batch."
  batchNumber: String!

  "Expiration date of the batch, commonly used for food."
  expiryDate: DateTime

  "Date the batch was produced.  Can be derived from the economic event of production."
  productionDate: DateTime
}

"""
An activity that changes inputs into outputs.  It could transform or transport economic resource(s).
"""
type Process {
  id: ID!

  "An informal or formal textual identifier for a process. Does not imply uniqueness."
  name: String!

  "The planned beginning of the process."
  hasBeginning: DateTime

  "The planned end of the process."
  hasEnd: DateTime

  "The process is complete or not.  This is irrespective of if the original goal has been met, and indicates that no more will be done."
  finished: Boolean

  "The definition or specification for a process."
  basedOn: ProcessSpecificationRef

  "References one or more concepts in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  classifiedAs: [URI!]

  "A textual description or comment."
  note: String

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [AccountingScope!]

  ##############################################################################
  # inverse relationships and queries

  inputs(action: ID): [EconomicEvent!]
  outputs(action: ID): [EconomicEvent!]
  unplannedEconomicEvents(action: ID): [EconomicEvent!]

  nextProcesses: [Process!]
  previousProcesses: [Process!]

  workingAgents: [Agent!]

  trace: [EconomicEvent!]
  track: [EconomicEvent!]

  "The process can be safely deleted, has no dependent information."
  deletable: Boolean
}



input EconomicEventCreateParams {
  "(`Action`) Relates an economic event to a verb, such as consume, produce, work, improve, etc."
  action: ID!

  "(`Process`) Defines the process to which this event is an input."
  inputOf: ID

  "(`Process`) Defines the process for which this event is an output."
  outputOf: ID

  "(`Agent`) The economic agent from whom the actual economic event is initiated."
  provider: ID!

  "(`Agent`) The economic agent whom the actual economic event is for."
  receiver: ID!

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [ID!]

  "(`EconomicResource`) Economic resource involved in the economic event."
  resourceInventoriedAs: ID

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "(`ResourceSpecification` | URI) The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  resourceConformsTo: ID

  "The amount and unit of the economic resource counted or inventoried. This is the quantity that could be used to increment or decrement a resource, depending on the type of resource and resource effect of action."
  resourceQuantity: IMeasure

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: IMeasure

  "(`SpatialThing`) The place where an economic event occurs.  Usually mappable."
  atLocation: ID

  "The beginning of the economic event."
  hasBeginning: DateTime

  "The end of the economic event."
  hasEnd: DateTime

  "The date/time at which the economic event occurred. Can be used instead of beginning and end."
  hasPointInTime: DateTime

  "A textual description or comment."
  note: String

  "Reference to an agreement between agents which specifies the rules or policies or calculations which govern this economic event."
  agreedIn: URI

  "(`Agreement`) This economic event occurs as part of this agreement."
  realizationOf: ID

  "(`EconomicEvent`) References another economic event that implied this economic event, often based on a prior agreement."
  triggeredBy: ID

  "(`EconomicResource`) Additional economic resource on the economic event when needed by the receiver. Used when a transfer or move, or sometimes other actions, requires explicitly identifying an economic resource on the receiving side."
  toResourceInventoriedAs: ID
}

input EconomicEventUpdateParams {
  id: ID!

  "A textual description or comment."
  note: String

  "Reference to an agreement between agents which specifies the rules or policies or calculations which govern this economic event."
  agreedIn: URI

  "(`Agreement`) This economic event occurs as part of this agreement."
  realizationOf: ID

  "(`EconomicEvent`) References another economic event that implied this economic event, often based on a prior agreement."
  triggeredBy: ID

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [ID!]
}

type EconomicEventResponse {
  "Details of the newly created event."
  economicEvent: EconomicEvent!
  "Details of any newly created `EconomicResource`, for events that create new resources."
  economicResource: EconomicResource
}



"""
Input `EconomicResource` type used when sending events to setup initial resource recordings
"""
input EconomicResourceCreateParams {
  "An informal or formal textual identifier for an item. Does not imply uniqueness."
  name: String

  "(`ResourceSpecification` | URI) The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  conformsTo: ID

  "Sometimes called serial number, used when each item must have a traceable identifier (like a computer). Could also be used for other unique tracking identifiers needed for resources."
  trackingIdentifier: String

  "(`ProductBatch`) Lot or batch of an economic resource, used to track forward or backwards to all occurrences of resources of that lot. Note more than one resource can be of the same lot."
  lot: ID

  "The uri to an image relevant to the resource, such as a photo, diagram, etc."
  image: URI

  "(`EconomicResource`) Used when a stock economic resource contains items also defined as economic resources."
  containedIn: ID

  "(`SpatialThing`) The current place an economic resource is located.  Could be at any level of granularity, from a town to an address to a warehouse location.  Usually mappable."
  currentLocation: ID

  "A textual description or comment."
  note: String
}

input EconomicResourceUpdateParams {
  id: ID!

  "References one or more concepts in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  classifiedAs: [URI!]

  "The uri to an image relevant to the resource, such as a photo, diagram, etc."
  image: URI

  "(`EconomicResource`) Used when a stock economic resource contains items also defined as economic resources."
  containedIn: ID

  "(`Unit`) The unit used for use or work or cite actions for this resource."
  unitOfEffort: ID

  "A textual description or comment."
  note: String
}

type EconomicResourceResponse {
  economicResource: EconomicResource!
}



input ProductBatchCreateParams {
  "The standard unique identifier of the batch."
  batchNumber: String!

  "Expiration date of the batch, commonly used for food."
  expiryDate: DateTime

  "Date the batch was produced.  Can be derived from the economic event of production."
  productionDate: DateTime
}

input ProductBatchUpdateParams {
  id: ID!

  "The standard unique identifier of the batch."
  batchNumber: String

  "Expiration date of the batch, commonly used for food."
  expiryDate: DateTime

  "Date the batch was produced.  Can be derived from the economic event of production."
  productionDate: DateTime
}

type ProductBatchResponse {
  productBatch: ProductBatch!
}



input ProcessCreateParams {
  "An informal or formal textual identifier for a process. Does not imply uniqueness."
  name: String!

  "The planned beginning of the process."
  hasBeginning: DateTime

  "The planned end of the process."
  hasEnd: DateTime

  "The process is complete or not.  This is irrespective of if the original goal has been met, and indicates that no more will be done."
  finished: Boolean

  "A textual description or comment."
  note: String

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [ID!]

  "(`Plan`) The process with its inputs and outputs is part of the plan."
  plannedWithin: ID

  "(`ProcessSpecification` | URI) The definition or specification for a process."
  basedOn: ID

  "References one or more concepts in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  classifiedAs: [URI!]
}

input ProcessUpdateParams {
  id: ID!

  "An informal or formal textual identifier for a process. Does not imply uniqueness."
  name: String

  "The planned beginning of the process."
  hasBeginning: DateTime

  "The planned end of the process."
  hasEnd: DateTime

  "The process is complete or not.  This is irrespective of if the original goal has been met, and indicates that no more will be done."
  finished: Boolean

  "A textual description or comment."
  note: String

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [ID!]

  "(`Plan`) The process with its inputs and outputs is part of the plan."
  plannedWithin: ID

  "(`ProcessSpecification` | URI) The definition or specification for a process."
  basedOn: ID

  "References one or more concepts in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  classifiedAs: [URI!]
}

type ProcessResponse {
  process: Process
}



type Query {
  economicEvent(id: ID): EconomicEvent
  economicEvents(start: ID, limit: Int): [EconomicEvent!]
  economicEventsFiltered(
    providerId: ID,
    receiverId: ID,
    resourceClassifiedAs: [URI!],
    action: ID,
    startDate: String,
    endDate: String
  ): [EconomicEvent!]

  economicResource(id: ID): EconomicResource
  economicResources(start: ID, limit: Int): [EconomicResource!]

  productBatch(id: ID): ProductBatch
  productBatches(start: ID, limit: Int): [ProductBatch!]

  process(id: ID): Process
  processes(start: ID, limit: Int): [Process!]
}

type Mutation {
  createEconomicEvent(event: EconomicEventCreateParams!, newInventoriedResource: EconomicResourceCreateParams): EconomicEventResponse
  updateEconomicEvent(event: EconomicEventUpdateParams!): EconomicEventResponse
  deleteEconomicEvent(id: ID!): Boolean

  # :TODO: should this be allowed without an originating event? Or should the event be recorded transparently?
  updateEconomicResource(resource: EconomicResourceUpdateParams!): EconomicResourceResponse
  deleteEconomicResource(id: ID!): Boolean

  createProductBatch(productBatch: ProductBatchCreateParams!): ProductBatchResponse
  updateProductBatch(productBatch: ProductBatchUpdateParams!): ProductBatchResponse
  deleteProductBatch(id: ID!): Boolean

  createProcess(process: ProcessCreateParams!): ProcessResponse
  updateProcess(process: ProcessUpdateParams!): ProcessResponse
  deleteProcess(id: ID!): Boolean
}
