##
#
# Measurement module
#
# Typedefs used for defining and representing measurements
# in the real (physical) world.
#
# @package  vf-graphql
# @since    2019-02-11
#
##

"""
Defines the unit of time measured in a temporal `Duration`.
"""
enum TimeUnit {
  year, month, week, day, hour, minute, second
}

"""
A `Duration` represents an interval between two `DateTime` values.
"""
type Duration {
  "A number representing the duration, will be paired with a unit."
  numericDuration: Float!

  "A unit of measure."
  unitType: TimeUnit!
}

"""
Mutation input structure for defining time durations.
"""
input IDuration {
  "A number representing the duration, will be paired with a unit."
  numericDuration: Float!

  "A unit of measure."
  unitType: TimeUnit!
}



"""
Defines a unit of measurement, along with its display symbol.
From OM2 vocabulary.
"""
type Unit {
  id: ID!

  "A human readable label for the unit, can be language specific."
  label: String!

  "A standard display symbol for a unit of measure."
  symbol: String!
}



"""
Semantic meaning for measurements: binds a quantity to its measurement unit.
See http://www.qudt.org/pages/QUDToverviewPage.html
"""
type Measure {
  "A number representing the quantity, will be paired with a unit."
  hasNumericalValue: Float!

  "A unit of measure."
  hasUnit: Unit
}

"""
Mutation input structure for defining measurements. Should be nulled if not present, rather than empty.
"""
input IMeasure {
  "A number representing the quantity, will be paired with a unit."
  hasNumericalValue: Float!

  "(`Unit`) A unit of measure."
  hasUnit: ID
}



input UnitCreateParams {
  "A human readable label for the unit, can be language specific."
  label: String!

  "A standard display symbol for a unit of measure."
  symbol: String!
}

input UnitUpdateParams {
  id: ID!

  "A human readable label for the unit, can be language specific."
  label: String

  "A standard display symbol for a unit of measure."
  symbol: String
}

type UnitResponse {
  unit: Unit
}



type Query {
  unit(id: ID): Unit
  units(start: ID, limit: Int): [Unit!]
}

type Mutation {
  createUnit(unit: UnitCreateParams): UnitResponse
  updateUnit(unit: UnitUpdateParams): UnitResponse
  deleteUnit(id: ID!): Boolean
}
